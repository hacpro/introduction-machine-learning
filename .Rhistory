na.approx(data[, 'reife'])
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/events.xlsx")
columns <- colnames(data)
sectors <- factor(columns[3:7], levels=rev(columns[3:7]), ordered = T)
years <- na.omit(data[, "jahr"])
sector <- rep(sectors, each = length(years))
year <-  as.numeric(rep(years, length(sectors)))
value <- c(
na.approx(data[, 'reife']),
na.approx(data[, 'schule']),
na.approx(data[, 'ausbildung']),
na.approx(data[, 'arbeit']),
na.approx(data[, 'weiterbildung'])
)
df <- data.frame(sector,year, value)
ggplot(arrange(df, sector), aes(x=year, y=value, fill=sector)) +
geom_area(colour="black", size=.2, alpha=.4) +
scale_fill_brewer(direction = -1,
palette="RdBu",
breaks=rev(levels(df$sector))) +
geom_vline(aes(xintercept=2017),linetype="dashed")
df <- data.frame(sector,year, value)
ggplot(arrange(df, sector), aes(x=year, y=value, fill=sector)) +
geom_area(colour="black", size=.1, alpha=.4) +
scale_fill_brewer(direction = -1,
palette="RdBu",
breaks=rev(levels(df$sector))) +
geom_vline(aes(xintercept=2017),linetype="dashed")
# ----------------------------------------------------------------------------------
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/events.xlsx")
columns <- colnames(data)
sectors <- factor(columns[3:7], levels=rev(columns[3:7]), ordered = T)
years <- na.omit(data[, "jahr"])
sector <- rep(sectors, each = length(years))
year <-  as.numeric(rep(years, length(sectors)))
value <- c(
na.approx(data[, 'reife']),
na.approx(data[, 'schule']),
na.approx(data[, 'ausbildung']),
na.approx(data[, 'arbeit']),
na.approx(data[, 'weiterbildung'])
)
df <- data.frame(sector,year, value)
ggplot(arrange(df, sector), aes(x=year, y=value, fill=sector)) +
geom_area(colour="black", size=.1, alpha=.4) +
scale_fill_brewer(direction = -1,
palette="RdBu",
breaks=rev(levels(df$sector))) +
geom_vline(aes(xintercept=2017),linetype="dashed")
# ----------------------------------------------------------------------------------
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/events.xlsx")
columns <- colnames(data)
sectors <- factor(columns[3:7], levels=rev(columns[3:7]), ordered = T)
years <- na.omit(data[, "jahr"])
sector <- rep(sectors, each = length(years))
year <-  as.numeric(rep(years, length(sectors)))
value <- c(
na.approx(data[, 'reife']),
na.approx(data[, 'schule']),
na.approx(data[, 'ausbildung']),
na.approx(data[, 'arbeit']),
na.approx(data[, 'weiterbildung'])
)
df <- data.frame(sector,year, value)
ggplot(arrange(df, sector), aes(x=year, y=value, fill=sector)) +
geom_area(colour="black", size=.1, alpha=.4) +
scale_fill_brewer(direction = -1,
palette="RdBu",
breaks=rev(levels(df$sector))) +
geom_vline(aes(xintercept=2017),linetype="dashed")
# ----------------------------------------------------------------------------------
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/events.xlsx")
columns <- colnames(data)
sectors <- factor(columns[3:7], levels=rev(columns[3:7]), ordered = T)
years <- na.omit(data[, "jahr"])
sector <- rep(sectors, each = length(years))
year <-  as.numeric(rep(years, length(sectors)))
value <- c(
na.approx(data[, 'reife']),
na.approx(data[, 'schule']),
na.approx(data[, 'ausbildung']),
na.approx(data[, 'arbeit']),
na.approx(data[, 'weiterbildung'])
)
df <- data.frame(sector,year, value)
ggplot(arrange(df, sector), aes(x=year, y=value, fill=sector)) +
geom_area(colour="black", size=.1, alpha=.4) +
scale_fill_brewer(direction = -1,
palette="RdBu",
breaks=rev(levels(df$sector))) +
geom_vline(aes(xintercept=2017),linetype="dashed")
# ----------------------------------------------------------------------------------
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/events.xlsx")
columns <- colnames(data)
sectors <- factor(columns[3:7], levels=rev(columns[3:7]), ordered = T)
years <- na.omit(data[, "jahr"])
sector <- rep(sectors, each = length(years))
year <-  as.numeric(rep(years, length(sectors)))
value <- c(
na.approx(data[, 'reife']),
na.approx(data[, 'schule']),
na.approx(data[, 'ausbildung']),
na.approx(data[, 'arbeit']),
na.approx(data[, 'weiterbildung'])
)
df <- data.frame(sector,year, value)
ggplot(arrange(df, sector), aes(x=year, y=value, fill=sector)) +
geom_area(colour="black", size=.1, alpha=.4) +
scale_fill_brewer(direction = -1,
palette="RdBu",
breaks=rev(levels(df$sector))) +
geom_vline(aes(xintercept=2017),linetype="dashed")
library(ggradar)
install.packages("ggradar")
library(ggradar)
install.packages("ggradar")
install_github("ricardo-bion/ggradar")
install.packages("githubinstall")
install_github("ricardo-bion/ggradar")
install.packages("devtools")
install_github("ricardo-bion/ggradar")
library(devtools)
install_github("ricardo-bion/ggradar")
library(ggradar)
library(scales)
languages <- c(
df_languages <- data.frame(
"year"=2017,
"DotNet"=9,
"Javascript"=3,
"R"=6,
"FSharp"=3,
"Ruby"=3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3)
ggradar(df_languages, grid.min = 1, grid.max = 10)
ggplot(arrange(melted_languages, year))+
aes(x=variable, y=value,color=year, group=year) +
geom_polygon(fill=NA) +
coord_polar() +
theme(axis.text.x = element_text(size = 10))+
theme(legend.position = "none")
ggplot(arrange(melted_languages, year))+
aes(x=variable, y=value,color=year, group=year) +
geom_polygon(fill=NA) +
coord_polar() +
theme(axis.text.x = element_text(size = 10))+
theme(legend.position = "none")
melted_languages <- melt(df_languages, id.vars = c("year"))
library(dplyr)
melted_languages <- melt(df_languages, id.vars = c("year"))
df_tech <- data.frame(
"group"=2017,
"Programming"=8,
"DDD"=7,
"TDD"=8,
"Design Patterns"=7,
"Architecture"=6)
ggradar(df_tech, grid.min = 1, grid.max = 10,
plot.legend = F)
ggradar(df_languages, grid.min = 1, grid.max = 10)
library(reshape2)
melted_languages <- melt(df_languages, id.vars = c("year"))
ggplot(arrange(melted_languages, year))+
aes(x=variable, y=value,color=year, group=year) +
geom_polygon(fill=NA) +
coord_polar() +
theme(axis.text.x = element_text(size = 5))+
theme(legend.position = "none")
data.frame("language"=
c("DotNet",
"Javascript",
"R",
"FSharp",
"Ruby"),
"skill"= c(9,3,6,3,3)) %>%
ggplot(aes(x=language, y=skill, fill=language)) +
geom_bar(stat = "identity",
size =.2) +
scale_fill_brewer(palette ="Greens") +
coord_flip()
library("portfolio")
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/typical_day.xlsx")
map.market(id = data$action, area = data$time, group = data$category,
scale = 600,
lab   = c("group"=T, "id"=T),
color = max(data$time)-data$time)
install.packages("portfolio")
library("portfolio")
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/typical_day.xlsx")
library(openxlsx)
data <- read.xlsx("C:/Users/ch0125/Dropbox/Admin/typical_day.xlsx")
map.market(id = data$action, area = data$time, group = data$category,
scale = 600,
lab   = c("group"=T, "id"=T),
color = max(data$time)-data$time)
ggradar(df_languages, grid.min = 1, grid.max = 10)
ggradar(df_languages, grid.min = 1, grid.max = 10,
axis.label.size = 10)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
df_languages
languages <- c(
df_languages <- data.frame(
"year"=2017,
"C#"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"F#"
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3)
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
languages <- c(
df_languages <- data.frame(
"year"=2017,
"C#"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"F#" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
languages <- c(
df_languages <- data.frame(
"year"=2017,
"C\#"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"F#" = 3
))
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
technologies <- c(
df_technologies <- data.frame(
"year"=2017,
".NET"=9,
"Rails"=3,
".NET Core"=6
))
df_technologies[2,] <- c(2020, 8, 5, 9)
ggradar(df_technologies, grid.min = 1, grid.max = 10,
legend.text.size = 10)
df_concepts[2,] <- c(2020, 8, 5, 9, 10)
concepts <- c(
df_concepts <- data.frame(
"year"=2017,
"DDD"=9,
"TDD"=3,
"OOD"=6,
"FP"=6
))
df_concepts[2,] <- c(2020, 8, 5, 9, 10)
ggradar(df_concepts, grid.min = 1, grid.max = 10,
legend.text.size = 10)
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
par(mar = c(2,2))
par(mar = c(2,2))
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
technologies <- c(
df_technologies <- data.frame(
"year"=2017,
".NET"=9,
"Rails"=3,
".NET Core"=6
))
df_technologies[2,] <- c(2020, 8, 5, 9)
ggradar(df_technologies, grid.min = 1, grid.max = 10,
legend.text.size = 10)
concepts <- c(
df_concepts <- data.frame(
"year"=2017,
"DDD"=9,
"TDD"=3,
"OOD"=6,
"FP"=6
))
df_concepts[2,] <- c(2020, 8, 5, 9, 10)
ggradar(df_concepts, grid.min = 1, grid.max = 10,
legend.text.size = 10)
par(mar = c(2,2))
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
par(mar = c(2,2,2,2))
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
technologies <- c(
df_technologies <- data.frame(
"year"=2017,
".NET"=9,
"Rails"=3,
".NET Core"=6
))
df_technologies[2,] <- c(2020, 8, 5, 9)
def.par <- par(no.readonly = TRUE) # save default, for resetting...
par(mfrow=c(2,2))
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
par(mfrow=c(2,2))
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
technologies <- c(
df_technologies <- data.frame(
"year"=2017,
".NET"=9,
"Rails"=3,
".NET Core"=6
))
df_technologies[2,] <- c(2020, 8, 5, 9)
ggradar(df_technologies, grid.min = 1, grid.max = 10,
legend.text.size = 10)
par(def.par)  #- reset to default
concepts <- c(
df_concepts <- data.frame(
"year"=2017,
"DDD"=9,
"TDD"=3,
"OOD"=6,
"FP"=6
))
df_concepts[2,] <- c(2020, 8, 5, 9, 10)
ggradar(df_concepts, grid.min = 1, grid.max = 10,
legend.text.size = 10)
languages <- c(
df_languages <- data.frame(
"year"=2017,
"Csharp"=9,
"Javascript"=3,
"R"=6,
"Python"=3,
"Ruby"=3,
"Fsharp" = 3
))
df_languages[2,] <- c(2020, 8, 5, 9, 4, 3, 5)
ggradar(df_languages, grid.min = 1, grid.max = 10,
legend.text.size = 10)
library(readr)
df <- read_csv("C:\\Source\\ecological-footprint\\metrics.csv")
summary(df)
df <- read_csv("C:\\Source\\ecological-footprint\\metrics.csv", ";")
summary(df)
df
df <- read.csv2("C:\\Source\\ecological-footprint\\metrics.csv", ";")
df <- read.csv2("C:\\Source\\ecological-footprint\\metrics.csv", sep = ";")
summary(df)
df <- read.csv2("C:\\Source\\ecological-footprint\\metrics.csv", sep = ";")
summary(df)
df
hist(df$metric)
hist(as.numeric(df$metric))
as.numeric(df$metric)
as.numeric(df$metric)
df <- read.csv2("C:\\Source\\ecological-footprint\\metrics.csv", sep = ";", dec=".")
df$metric
hist(df$metric)
range(df$metric)
setwd("c:/source/introduction-machine-learning")
movies <- read.csv("movielens-datasets/movies.csv",stringsAsFactors=FALSE)
ratings <- read.csv("movielens-datasets/ratings.csv")
library(recommenderlab)
library(ggplot2)
## Data pre-processing
genres <- as.data.frame(movies$genres, stringsAsFactors=FALSE)
library(data.table)
genres2 <- as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:10)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") # we have 18 genres in total
genre_matrix <- matrix(0,9126,18) #empty matrix, 9126=no of movies+1, 18=no of genres
genre_matrix[1,] <- genre_list #set first row to genre list
colnames(genre_matrix) <- genre_list #set column names to genre list
#iterate through matrix
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
}
#convert into dataframe
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])
} #convert from characters to integers
#Create a matrix to search for a movie by genre:
years <- as.data.frame(movies$title, stringsAsFactors=FALSE)
library(data.table)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
years <- as.data.frame(substr(substrRight(substrRight(years$`movies$title`, 6),5),1,4))
search_matrix <- cbind(movies[,1], substr(movies[,2],1,nchar(movies[,2])-6), years, genre_matrix2)
colnames(search_matrix) <- c("movieId", "title", "year", genre_list)
write.csv(search_matrix, "search.csv")
search_matrix <- read.csv("search.csv", stringsAsFactors=FALSE)
# Example of search an Action movie produced in 1995:
subset(search_matrix, Action == 1 & year == 1995)$title
## Create a user profile
binaryratings <- ratings
# ratings of 4 and 5 are mapped to 1,
# representing likes, and ratings of 3
# and below are mapped to -1, representing
# dislikes:
for (i in 1:nrow(binaryratings)){
if (binaryratings[i,3] > 3){
binaryratings[i,3] <- 1
}
else{
binaryratings[i,3] <- -1
}
}
# convert binaryratings matrix to the correct format:
binaryratings2 <- dcast(binaryratings, movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(binaryratings2)){
binaryratings2[which(is.na(binaryratings2[,i]) == TRUE),i] <- 0
}
binaryratings2 = binaryratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds
#Remove rows that are not rated from movies dataset
movieIds <- length(unique(movies$movieId)) #10329
ratingmovieIds <- length(unique(ratings$movieId)) #10325
movies2 <- movies[-which((movies$movieId %in% ratings$movieId) == FALSE),]
rownames(movies2) <- NULL
#Remove rows that are not rated from genre_matrix2
genre_matrix3 <- genre_matrix2[-which((movies$movieId %in% ratings$movieId) == FALSE),]
rownames(genre_matrix3) <- NULL
head(genre_matrix3)
head(genre_matrix3)
